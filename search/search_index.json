{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Digital Dice \u00b6 You want to have more flair when playing board games with family or friends? Why not use electronic dice? With electronic dice you can keep the statistics or remember what you threw last time. This way you wont forget what the odds are leaning too. You can use it to settle arguments of what happend before with the throw history. The Dice itself will be a microcontroller with a button, LCD screen to display the thrown number and a battery to make it wireless and easy to carry it around. There will be a website where you can throw dice, see history, and or even statistics to keep you up to date on the changes the dice lives through. There will be an admin page to see and manage all the data, and a sweet user friendly front-end where you can see the statics, device data, and the history of throws. To enable the electronic dice to work everywhere, we took the time to create an API where the microcontroller can talk to the website and keep track of your offline gaming statistics.","title":"Digital Dice"},{"location":"#digital-dice","text":"You want to have more flair when playing board games with family or friends? Why not use electronic dice? With electronic dice you can keep the statistics or remember what you threw last time. This way you wont forget what the odds are leaning too. You can use it to settle arguments of what happend before with the throw history. The Dice itself will be a microcontroller with a button, LCD screen to display the thrown number and a battery to make it wireless and easy to carry it around. There will be a website where you can throw dice, see history, and or even statistics to keep you up to date on the changes the dice lives through. There will be an admin page to see and manage all the data, and a sweet user friendly front-end where you can see the statics, device data, and the history of throws. To enable the electronic dice to work everywhere, we took the time to create an API where the microcontroller can talk to the website and keep track of your offline gaming statistics.","title":"Digital Dice"},{"location":"admin_manual/","text":"","title":"Admin Manual"},{"location":"api_documentation/","text":"API Documentation \u00b6 In this documentation, you will find details on how to authenticate with our API, the available endpoints, parameters and examples of requests and responses. We hope you find this documentation helpful. Base link / Website: \u00b6 Website root link: http://rcoelen.loca.lt API service page/router: http://rcoelen.loca.lt/api.php Adding parameters at the end of the link: http://rcoelen.loca.lt/api.php? Defining an action at the end of the link: http://rcoelen.loca.lt/api.php?action=read ( Getting data ) http://rcoelen.loca.lt/api.php?action=create ( Creating data ) Format \u00b6 Function to executed Assigning variable Value to store/read &variable_name = variable_value Example: &number=6 You can chain the variables: &number=6&chipid=AE67 Required variables \u00b6 action - (Text| Example: Read/Create) defines the different function the api offers number - (Number| Example: 3) the rolled number data of the device Optional variables \u00b6 chipid - (Text| Example: \u201cAE85\u201d) the device id for keeping track of records textready - (Bool| Example: True/False) inbuilt function for a smaller list for embedded devices limit - (Number| Example: 10) limit the number of record getting requested Returnable variables \u00b6 success - (Bool | Example: True/False) returns status message if message sent reached the server","title":"API Documentation"},{"location":"api_documentation/#api-documentation","text":"In this documentation, you will find details on how to authenticate with our API, the available endpoints, parameters and examples of requests and responses. We hope you find this documentation helpful.","title":"API Documentation"},{"location":"api_documentation/#base-link-website","text":"Website root link: http://rcoelen.loca.lt API service page/router: http://rcoelen.loca.lt/api.php Adding parameters at the end of the link: http://rcoelen.loca.lt/api.php? Defining an action at the end of the link: http://rcoelen.loca.lt/api.php?action=read ( Getting data ) http://rcoelen.loca.lt/api.php?action=create ( Creating data )","title":"Base link / Website:"},{"location":"api_documentation/#format","text":"Function to executed Assigning variable Value to store/read &variable_name = variable_value Example: &number=6 You can chain the variables: &number=6&chipid=AE67","title":"Format"},{"location":"api_documentation/#required-variables","text":"action - (Text| Example: Read/Create) defines the different function the api offers number - (Number| Example: 3) the rolled number data of the device","title":"Required variables"},{"location":"api_documentation/#optional-variables","text":"chipid - (Text| Example: \u201cAE85\u201d) the device id for keeping track of records textready - (Bool| Example: True/False) inbuilt function for a smaller list for embedded devices limit - (Number| Example: 10) limit the number of record getting requested","title":"Optional variables"},{"location":"api_documentation/#returnable-variables","text":"success - (Bool | Example: True/False) returns status message if message sent reached the server","title":"Returnable variables"},{"location":"architecture_overview/","text":"A schematic overview of the software components showing that the product exists and how they are connected For local development reasons, we use localtunnel to redirect traffic to the local host.","title":"Architecture Overview"},{"location":"changelog/","text":"Changelog: V1.0 Finsished Basic Blueprint \u00b6 date: 30-3-2023 Back-end updated code/docmentation (cleaned up facade, database connection) Arduino updated code/docmentation (removed comments, magic numbers) Updated research question, and question and subjects. Changelog: V1.1 General Research \u00b6 date: 4-4-2023 Updated research in general name questions Added SQL instructions database .sql file Changed research question Changelog: V1.2 Profile Phase \u00b6 date: 10-4-2023 Updated BOM to have wood material Updated research: kickstarter/business start-up Started a kickstarter page","title":"Changelog"},{"location":"changelog/#changelog-v10-finsished-basic-blueprint","text":"date: 30-3-2023 Back-end updated code/docmentation (cleaned up facade, database connection) Arduino updated code/docmentation (removed comments, magic numbers) Updated research question, and question and subjects.","title":"Changelog: V1.0 Finsished Basic Blueprint"},{"location":"changelog/#changelog-v11-general-research","text":"date: 4-4-2023 Updated research in general name questions Added SQL instructions database .sql file Changed research question","title":"Changelog: V1.1 General Research"},{"location":"changelog/#changelog-v12-profile-phase","text":"date: 10-4-2023 Updated BOM to have wood material Updated research: kickstarter/business start-up Started a kickstarter page","title":"Changelog: V1.2 Profile Phase"},{"location":"embedded_device/","text":"My first project where I have to make microprocessors and different hardware and software work together using the internet. The idea was conceived through design thinking where I had to design and sell a device. So I started looking for inspiration where it might help. I was able to learn a lot about different TI practices really enjoyed playing with different sensors and devices it was very informative for me. First went to learn about arduino pins and connections high low includes syntax, connection to the internet using sensors and various connections, and the basics of microprocessors and internet of things in general. I borrowed and practiced with some sensors which gave me the confidence to get more parts. With 2 of the 5 sensors I ran into an issue where they can\u2019t really interface. Actually the LCD just wouldn\u2019t work so I had obtained an i2c backpack which allowed me to interface but using diagnostic software it showed it couldn\u2019t find the LCD. So I lost a lot of time and the LCD is just broken. but still the LCD didn\u2019t give any light and burned out. so I had also ordered at the same time which made me order a new one and they do work which gave me a lot more insight into user interaction by displaying text messages on lcd. I had never known so much about the world of microchips and development which broadened my development in engineering much more. System Requirements \u00b6 EMBRQ#01: Embedded device sends measured sensordata to the application backend over http or https. The sendData function sends a GET request to an API endpoint specified in the SERVER_URL variable, which includes the sensor data as query parameters. The request is made using the HTTPClient library and the begin, GET, and getString methods. Code: /* * Sends an HTTP GET request with the rolled dice number to the API server. * * @param number The thrown dice number to be sent in the request. * @return void */ void sendData ( int number ) { HTTPClient http ; // Declare object of class HTTPClient WiFiClient client ; // create api call, form the link with the data in the GET parameters String message = String ( SERVER_URL ) + \"/api.php?action=create&number=\" + number + \"&chipid=\" + chipID ; if ( DEBUG_MODE ) Serial . println ( message ); http . begin ( client , message ); //Specify request destination int httpCode = http . GET (); // do request String payload = http . getString (); // Get the response payload if ( httpCode > MINIMUM_CODE ) { //Check for the returning code String payload = http . getString (); if ( DEBUG_MODE ) { Serial . println ( httpCode ); Serial . println ( payload ); } } else { if ( DEBUG_MODE ) { Serial . println ( \"Error on HTTP request\" ); Serial . println ( httpCode ); Serial . println ( payload ); } } http . end (); //Close connection } EMBRQ#02: Embedded device receives or retrieves status messages from the application backend over http or https. In the display idle, screen i update the previous throws on the screen using a api call from the website backend, in which i used a parameter called read to request specific data using different link parameters. Code: /* * Display the result of a dice throw with ASCII art on the LCD screen * * @param number: the number thrown by the dice * @return: void */ void displayDice ( int number ) { lcd . setCursor ( LEFT_LCD , TOP_LCD ); lcd . print ( \"________\" ); lcd . setCursor ( LEFT_LCD , TOP_LCD + 1 ); lcd . print ( \"| | You Threw\" ); lcd . setCursor ( LEFT_LCD , TOP_LCD + 2 ); String diceNumber = String ( number ) + \" \" ; if ( number > DOUBLE_DIGITS ) { diceNumber = String ( number ); } String diceText ; switch ( number ) { // for offical dice between 1-6 show nice text case 1 : diceText = \"A One!\" ; break ; case 2 : diceText = \"A Two!\" ; break ; case 3 : diceText = \"A Three!\" ; break ; case 4 : diceText = \"A Four!\" ; break ; case 5 : diceText = \"A Five!\" ; break ; case 6 : diceText = \"A Six!\" ; break ; default : diceText = \"A \" + String ( number ) + \"!\" ; // else show the number break ; } lcd . print ( \"| \" + diceNumber + \" | \" + diceText ); lcd . setCursor ( LEFT_LCD , TOP_LCD + 3 ); lcd . print ( \"|______|\" ); } EMBRQ#03: The embedded device contains at least two input sensors (e.g. LDR, buttons, joystick, capacitive touch, etc.). The Electronic dice device uses 2 input sensors. One is a button to create a simple action to throw dice and let the computer do its thing. Where the second input sensor is a potentiometer. I probably could make a simple navigation menu, but i kept it simple and made the max throwable number match the input of the potentiometer. Code: /* * This function represents the default loop of the program, * it reads the analog data from the potentiometer, maps the value to the desired range, and sends a request to the server after a button press. * It also displays feedback on an LCD screen, showing the maximum number that can be rolled, the rolled number (when thrown), and idle screen with last thrown dice numbers. * * @param potentioMeter The current value read from the potentiometer. * @return void */ void loop () { // turn on led when ready digitalWrite ( LED_PIN , HIGH ); // check with delay agains stuttering delay ( STUTTERING_DELAY ); // read values if ( digitalRead ( BUTTON_PIN ) == LOW ) buttonPressed = true ; // when button pressed just wait for next cycle int potRead = analogRead ( POTENTIOMETER_PIN ); // read analog data int mappedVal = map ( potRead , MIN_VALUE_POTENTIOMETER , MAX_VALUE_POTENTIOMETER , STARTING_DIGIT , MAX_NUM ); // map the potentiometer value to the desired range //if (DEBUG_MODE) Serial.println(mappedVal); // update the potentiometer value in the idle screen lcd . setCursor ( LEFT_LCD , TOP_LCD + 1 ); lcd . print ( \"Max Number: \" + String ( mappedVal )); // get deltatime currentMillis = millis (); if ( buttonPressed == true ) { if ( DEBUG_MODE ) Serial . println ( \"Button Pressed!\" ); //Every requestDelay, send a request to the server if ( currentMillis > oldTime + REQUEST_DELAY ) { if ( DEBUG_MODE ) Serial . println ( \"Sending Event!\" ); // turn off led to show its thinking digitalWrite ( LED_PIN , LOW ); // generate random number, using potentiometer int r = random ( STARTING_DIGIT , mappedVal ); // send data if connected if ( WiFi . status () == WL_CONNECTED ) { sendData ( r ); } // display feedback rolled number lcd . clear (); displayDice ( r ); // wait delay ( DICE_THROW_DELAY ); // reset delay counter oldTime = currentMillis ; buttonPressed = false ; // update screen displayIdle ( mappedVal ); } } } EMBRQ#04: The embedded device contains at least two visual and/or sensory outputs (e.g. LED, LED Matrix, 7-segement display, motor, servo, actuator, LCD-screen, etc.). The Electronic dice device uses 2 sensory outputs to communicate with the end user. one of the sensors and most important one is the liquid crystal display (LCD). The LCD is used to show previous throws, the max throwable value and the dice throw reveal. The last one is pretty useful, its a simple light emitting diode (LED). This is used when the end-user can press the button again, this makes it intuitive to use when waiting for results and gives a little extra feedback. Code: /* * This function represents the default loop of the program, * it reads the analog data from the potentiometer, maps the value to the desired range, and sends a request to the server after a button press. * It also displays feedback on an LCD screen, showing the maximum number that can be rolled, the rolled number (when thrown), and idle screen with last thrown dice numbers. * * @param potentioMeter The current value read from the potentiometer. * @return void */ void loop () { // turn on led when ready digitalWrite ( LED_PIN , HIGH ); // check with delay agains stuttering delay ( STUTTERING_DELAY ); // read values if ( digitalRead ( BUTTON_PIN ) == LOW ) buttonPressed = true ; // when button pressed just wait for next cycle int potRead = analogRead ( POTENTIOMETER_PIN ); // read analog data int mappedVal = map ( potRead , MIN_VALUE_POTENTIOMETER , MAX_VALUE_POTENTIOMETER , STARTING_DIGIT , MAX_NUM ); // map the potentiometer value to the desired range //if (DEBUG_MODE) Serial.println(mappedVal); // update the potentiometer value in the idle screen lcd . setCursor ( LEFT_LCD , TOP_LCD + 1 ); lcd . print ( \"Max Number: \" + String ( mappedVal )); // get deltatime currentMillis = millis (); if ( buttonPressed == true ) { if ( DEBUG_MODE ) Serial . println ( \"Button Pressed!\" ); //Every requestDelay, send a request to the server if ( currentMillis > oldTime + REQUEST_DELAY ) { if ( DEBUG_MODE ) Serial . println ( \"Sending Event!\" ); // turn off led to show its thinking digitalWrite ( LED_PIN , LOW ); // generate random number, using potentiometer int r = random ( STARTING_DIGIT , mappedVal ); // send data if connected if ( WiFi . status () == WL_CONNECTED ) { sendData ( r ); } // display feedback rolled number lcd . clear (); displayDice ( r ); // wait delay ( DICE_THROW_DELAY ); // reset delay counter oldTime = currentMillis ; buttonPressed = false ; // update screen displayIdle ( mappedVal ); } } } EMBRQ#05: The embedded device uses the wifi manager for configuration of SSID, User ID (UID) en Password (PWD) for connecting to the network. The device uses a default connection system where the username and password can be pre-installed. But in case the user doesnt connect to any network, the user can simply connect to the device and choose a network by himself. Code: /* * This function is used to connect the device to the internet using the default WiFi network and password. * It initiates the connection process. If the connection is not established within a certain time, it tries to reconnect. * If the connection fails, it launches the WiFiManager to allow the user to manually connect and change the access points. * * @param BACKUP_SSID . * @param BACKUP_PASSWORD . * @return void (connection) */ void connectToDefault () { WiFi . mode ( WIFI_STA ); WiFi . begin ( BACKUP_SSID , BACKUP_PASSWORD ); int timer = 0 ; // create a local scoped timer that starts at 0 while ( WiFi . status () != WL_CONNECTED && DEBUG_MODE ) { // when not connected try reconeccting delay ( DOT_DELAY ); Serial . print ( \".\" ); timer += DOT_DELAY ; if ( timer > RECONNECT_CANCEL_DELAY ) break ; } if ( WiFi . status () == WL_CONNECTED ) { // when connected show debugging information Serial . println ( \"\" ); Serial . println ( \"WiFi connected\" ); Serial . println ( \"IP address: \" ); Serial . println ( WiFi . localIP ()); Serial . println ( \"WiFi Status: \" ); Serial . println ( WiFi . status ()); } else { // if not connection // let the user be able to connect and change access points by himself WiFiManager wifiManager ; wifiManager . autoConnect ( CONFIG_SSID ); } } Hardware overview \u00b6 A schematic overview of the software components showing that the product exists and how they are connected For local development reasons, we use localtunnel to redirect traffic to the local host. Circuit diagram \u00b6 A schematic overview of the hardware components and how they are connected. Inexperienced students can use Fritzing, experienced users should draw schematics in an EDA of choice (EagleCAD, KiCAD, EasyEDA, etc.) BOM \u00b6 A Bill of Materials (BOM) is a comprehensive list of all the raw materials, components, and sub-assemblies required to manufacture or build a product. It serves as a critical document that details the parts, quantities, and specifications needed for a production run, repair or maintenance project. BOMLevel PartNumber Manufacturer PartName Revision Description Quantity Price Exampleurl 2 hd44780 Hitachi HD44780 20x2 LCD Blue Liquid crystal display 1 \u20ac 14.95 https://www.123-3d.nl/123-3D-LCD-20-x-4-blauw-wit-i226-t15363.html 0 ESP8266-CH340 EspressifSystems WEMOS-D1-MINI v4 controller for device 1 \u20ac 6.35 https://opencircuit.nl/product/wemos-d1-mini-v4.0-wifi-module 1 PCF8574A Hitachi I2C LCD Backpack Analog to I2C bus 1 \u20ac 1.95 https://www.hobbyelectronica.nl/product/i2c-lcd-interface-voor-16x2-en-20x4-displays/ 3 BL-10 RED 30MM Arcade button Red arcade button 1 \u20ac 0.61 https://uge-one.com/arcade-style-big-round-push-button-30mm-blue-color.html 4 Powerbank 5v 2A Any regular powerbank 1 \u20ac 9.99 https://www.coolblue.nl/product/899025/bluebuilt-powerbank-20-000-mah-power-delivery-en-quick-charge.html 5 USB to USB-C Cable Any regular 1 \u20ac 9.99 https://www.coolblue.nl/product/898237/veripart-usb-c-naar-usb-c-kabel-1m-kunststof-zwart.html 6 5MM LED Any regular (green) 1 \u20ac 0.15 https://www.allekabels.nl/led-diode/7369/1074033/standaard-led-3mm-groen-diffuus.html 7 KW-1520 Potentiometer Linear resistor 10K 1 \u20ac 1.15 https://www.kiwi-electronics.com/nl/panel-mount-10k-potentiometer-breadboard-vriendelijk-1783?search=Panel%20Mount%2010K%20potentiometer 8 818520 Hout Multiplex timmerplaat 3mm 122x61cm 1 \u20ac 7.79 https://www.gamma.nl/assortiment/multiplex-timmerplaat-3-mm-122x61-cm/p/B818520","title":"Embedded Device"},{"location":"embedded_device/#system-requirements","text":"EMBRQ#01: Embedded device sends measured sensordata to the application backend over http or https. The sendData function sends a GET request to an API endpoint specified in the SERVER_URL variable, which includes the sensor data as query parameters. The request is made using the HTTPClient library and the begin, GET, and getString methods. Code: /* * Sends an HTTP GET request with the rolled dice number to the API server. * * @param number The thrown dice number to be sent in the request. * @return void */ void sendData ( int number ) { HTTPClient http ; // Declare object of class HTTPClient WiFiClient client ; // create api call, form the link with the data in the GET parameters String message = String ( SERVER_URL ) + \"/api.php?action=create&number=\" + number + \"&chipid=\" + chipID ; if ( DEBUG_MODE ) Serial . println ( message ); http . begin ( client , message ); //Specify request destination int httpCode = http . GET (); // do request String payload = http . getString (); // Get the response payload if ( httpCode > MINIMUM_CODE ) { //Check for the returning code String payload = http . getString (); if ( DEBUG_MODE ) { Serial . println ( httpCode ); Serial . println ( payload ); } } else { if ( DEBUG_MODE ) { Serial . println ( \"Error on HTTP request\" ); Serial . println ( httpCode ); Serial . println ( payload ); } } http . end (); //Close connection } EMBRQ#02: Embedded device receives or retrieves status messages from the application backend over http or https. In the display idle, screen i update the previous throws on the screen using a api call from the website backend, in which i used a parameter called read to request specific data using different link parameters. Code: /* * Display the result of a dice throw with ASCII art on the LCD screen * * @param number: the number thrown by the dice * @return: void */ void displayDice ( int number ) { lcd . setCursor ( LEFT_LCD , TOP_LCD ); lcd . print ( \"________\" ); lcd . setCursor ( LEFT_LCD , TOP_LCD + 1 ); lcd . print ( \"| | You Threw\" ); lcd . setCursor ( LEFT_LCD , TOP_LCD + 2 ); String diceNumber = String ( number ) + \" \" ; if ( number > DOUBLE_DIGITS ) { diceNumber = String ( number ); } String diceText ; switch ( number ) { // for offical dice between 1-6 show nice text case 1 : diceText = \"A One!\" ; break ; case 2 : diceText = \"A Two!\" ; break ; case 3 : diceText = \"A Three!\" ; break ; case 4 : diceText = \"A Four!\" ; break ; case 5 : diceText = \"A Five!\" ; break ; case 6 : diceText = \"A Six!\" ; break ; default : diceText = \"A \" + String ( number ) + \"!\" ; // else show the number break ; } lcd . print ( \"| \" + diceNumber + \" | \" + diceText ); lcd . setCursor ( LEFT_LCD , TOP_LCD + 3 ); lcd . print ( \"|______|\" ); } EMBRQ#03: The embedded device contains at least two input sensors (e.g. LDR, buttons, joystick, capacitive touch, etc.). The Electronic dice device uses 2 input sensors. One is a button to create a simple action to throw dice and let the computer do its thing. Where the second input sensor is a potentiometer. I probably could make a simple navigation menu, but i kept it simple and made the max throwable number match the input of the potentiometer. Code: /* * This function represents the default loop of the program, * it reads the analog data from the potentiometer, maps the value to the desired range, and sends a request to the server after a button press. * It also displays feedback on an LCD screen, showing the maximum number that can be rolled, the rolled number (when thrown), and idle screen with last thrown dice numbers. * * @param potentioMeter The current value read from the potentiometer. * @return void */ void loop () { // turn on led when ready digitalWrite ( LED_PIN , HIGH ); // check with delay agains stuttering delay ( STUTTERING_DELAY ); // read values if ( digitalRead ( BUTTON_PIN ) == LOW ) buttonPressed = true ; // when button pressed just wait for next cycle int potRead = analogRead ( POTENTIOMETER_PIN ); // read analog data int mappedVal = map ( potRead , MIN_VALUE_POTENTIOMETER , MAX_VALUE_POTENTIOMETER , STARTING_DIGIT , MAX_NUM ); // map the potentiometer value to the desired range //if (DEBUG_MODE) Serial.println(mappedVal); // update the potentiometer value in the idle screen lcd . setCursor ( LEFT_LCD , TOP_LCD + 1 ); lcd . print ( \"Max Number: \" + String ( mappedVal )); // get deltatime currentMillis = millis (); if ( buttonPressed == true ) { if ( DEBUG_MODE ) Serial . println ( \"Button Pressed!\" ); //Every requestDelay, send a request to the server if ( currentMillis > oldTime + REQUEST_DELAY ) { if ( DEBUG_MODE ) Serial . println ( \"Sending Event!\" ); // turn off led to show its thinking digitalWrite ( LED_PIN , LOW ); // generate random number, using potentiometer int r = random ( STARTING_DIGIT , mappedVal ); // send data if connected if ( WiFi . status () == WL_CONNECTED ) { sendData ( r ); } // display feedback rolled number lcd . clear (); displayDice ( r ); // wait delay ( DICE_THROW_DELAY ); // reset delay counter oldTime = currentMillis ; buttonPressed = false ; // update screen displayIdle ( mappedVal ); } } } EMBRQ#04: The embedded device contains at least two visual and/or sensory outputs (e.g. LED, LED Matrix, 7-segement display, motor, servo, actuator, LCD-screen, etc.). The Electronic dice device uses 2 sensory outputs to communicate with the end user. one of the sensors and most important one is the liquid crystal display (LCD). The LCD is used to show previous throws, the max throwable value and the dice throw reveal. The last one is pretty useful, its a simple light emitting diode (LED). This is used when the end-user can press the button again, this makes it intuitive to use when waiting for results and gives a little extra feedback. Code: /* * This function represents the default loop of the program, * it reads the analog data from the potentiometer, maps the value to the desired range, and sends a request to the server after a button press. * It also displays feedback on an LCD screen, showing the maximum number that can be rolled, the rolled number (when thrown), and idle screen with last thrown dice numbers. * * @param potentioMeter The current value read from the potentiometer. * @return void */ void loop () { // turn on led when ready digitalWrite ( LED_PIN , HIGH ); // check with delay agains stuttering delay ( STUTTERING_DELAY ); // read values if ( digitalRead ( BUTTON_PIN ) == LOW ) buttonPressed = true ; // when button pressed just wait for next cycle int potRead = analogRead ( POTENTIOMETER_PIN ); // read analog data int mappedVal = map ( potRead , MIN_VALUE_POTENTIOMETER , MAX_VALUE_POTENTIOMETER , STARTING_DIGIT , MAX_NUM ); // map the potentiometer value to the desired range //if (DEBUG_MODE) Serial.println(mappedVal); // update the potentiometer value in the idle screen lcd . setCursor ( LEFT_LCD , TOP_LCD + 1 ); lcd . print ( \"Max Number: \" + String ( mappedVal )); // get deltatime currentMillis = millis (); if ( buttonPressed == true ) { if ( DEBUG_MODE ) Serial . println ( \"Button Pressed!\" ); //Every requestDelay, send a request to the server if ( currentMillis > oldTime + REQUEST_DELAY ) { if ( DEBUG_MODE ) Serial . println ( \"Sending Event!\" ); // turn off led to show its thinking digitalWrite ( LED_PIN , LOW ); // generate random number, using potentiometer int r = random ( STARTING_DIGIT , mappedVal ); // send data if connected if ( WiFi . status () == WL_CONNECTED ) { sendData ( r ); } // display feedback rolled number lcd . clear (); displayDice ( r ); // wait delay ( DICE_THROW_DELAY ); // reset delay counter oldTime = currentMillis ; buttonPressed = false ; // update screen displayIdle ( mappedVal ); } } } EMBRQ#05: The embedded device uses the wifi manager for configuration of SSID, User ID (UID) en Password (PWD) for connecting to the network. The device uses a default connection system where the username and password can be pre-installed. But in case the user doesnt connect to any network, the user can simply connect to the device and choose a network by himself. Code: /* * This function is used to connect the device to the internet using the default WiFi network and password. * It initiates the connection process. If the connection is not established within a certain time, it tries to reconnect. * If the connection fails, it launches the WiFiManager to allow the user to manually connect and change the access points. * * @param BACKUP_SSID . * @param BACKUP_PASSWORD . * @return void (connection) */ void connectToDefault () { WiFi . mode ( WIFI_STA ); WiFi . begin ( BACKUP_SSID , BACKUP_PASSWORD ); int timer = 0 ; // create a local scoped timer that starts at 0 while ( WiFi . status () != WL_CONNECTED && DEBUG_MODE ) { // when not connected try reconeccting delay ( DOT_DELAY ); Serial . print ( \".\" ); timer += DOT_DELAY ; if ( timer > RECONNECT_CANCEL_DELAY ) break ; } if ( WiFi . status () == WL_CONNECTED ) { // when connected show debugging information Serial . println ( \"\" ); Serial . println ( \"WiFi connected\" ); Serial . println ( \"IP address: \" ); Serial . println ( WiFi . localIP ()); Serial . println ( \"WiFi Status: \" ); Serial . println ( WiFi . status ()); } else { // if not connection // let the user be able to connect and change access points by himself WiFiManager wifiManager ; wifiManager . autoConnect ( CONFIG_SSID ); } }","title":"System Requirements"},{"location":"embedded_device/#hardware-overview","text":"A schematic overview of the software components showing that the product exists and how they are connected For local development reasons, we use localtunnel to redirect traffic to the local host.","title":"Hardware overview"},{"location":"embedded_device/#circuit-diagram","text":"A schematic overview of the hardware components and how they are connected. Inexperienced students can use Fritzing, experienced users should draw schematics in an EDA of choice (EagleCAD, KiCAD, EasyEDA, etc.)","title":"Circuit diagram"},{"location":"embedded_device/#bom","text":"A Bill of Materials (BOM) is a comprehensive list of all the raw materials, components, and sub-assemblies required to manufacture or build a product. It serves as a critical document that details the parts, quantities, and specifications needed for a production run, repair or maintenance project. BOMLevel PartNumber Manufacturer PartName Revision Description Quantity Price Exampleurl 2 hd44780 Hitachi HD44780 20x2 LCD Blue Liquid crystal display 1 \u20ac 14.95 https://www.123-3d.nl/123-3D-LCD-20-x-4-blauw-wit-i226-t15363.html 0 ESP8266-CH340 EspressifSystems WEMOS-D1-MINI v4 controller for device 1 \u20ac 6.35 https://opencircuit.nl/product/wemos-d1-mini-v4.0-wifi-module 1 PCF8574A Hitachi I2C LCD Backpack Analog to I2C bus 1 \u20ac 1.95 https://www.hobbyelectronica.nl/product/i2c-lcd-interface-voor-16x2-en-20x4-displays/ 3 BL-10 RED 30MM Arcade button Red arcade button 1 \u20ac 0.61 https://uge-one.com/arcade-style-big-round-push-button-30mm-blue-color.html 4 Powerbank 5v 2A Any regular powerbank 1 \u20ac 9.99 https://www.coolblue.nl/product/899025/bluebuilt-powerbank-20-000-mah-power-delivery-en-quick-charge.html 5 USB to USB-C Cable Any regular 1 \u20ac 9.99 https://www.coolblue.nl/product/898237/veripart-usb-c-naar-usb-c-kabel-1m-kunststof-zwart.html 6 5MM LED Any regular (green) 1 \u20ac 0.15 https://www.allekabels.nl/led-diode/7369/1074033/standaard-led-3mm-groen-diffuus.html 7 KW-1520 Potentiometer Linear resistor 10K 1 \u20ac 1.15 https://www.kiwi-electronics.com/nl/panel-mount-10k-potentiometer-breadboard-vriendelijk-1783?search=Panel%20Mount%2010K%20potentiometer 8 818520 Hout Multiplex timmerplaat 3mm 122x61cm 1 \u20ac 7.79 https://www.gamma.nl/assortiment/multiplex-timmerplaat-3-mm-122x61-cm/p/B818520","title":"BOM"},{"location":"physical_design/","text":"Physical design \u00b6 Concept \u00b6 The user is a boardgame player, someone in need of a number, gambler or someone who wants to try their luck. Its someone who uses dice regularly in some shape or form. Their needs is to have a random number while being entertained doing so. Their needs might also include keeping track of previous throws to verify cheaters, or even predicting what comes next. That brings us to the main goal of the product which is to tackle those problems by making an electronic dice. Electronic dice can be helpful in this situation because they can keep track of numbers and be used to verify a throw in a specific moment in time. While not being constrained to physical reality, if you need a number from 1-6 and you have a 20 sided die you could not do anything about it. With Electronic Dice\u2122 you can select the number ceiling and not requiring every dice ever. The requirements (SMART) defined for the product: Have a opening/Be able to interact with the LCD, Button, LED, Potentiometer and USB-C port. Make it transportable in dimension between 20 by 20 centimeters. It should be easy to manifacture by normal hobbyist level means. It should protect the components. interaction/design sketch : I made different sketches of what the design and the interaction could be. Because you would look at the LCD while pressing the button, and when a higher number is needed the potentiometer could be turned to higher value. The user can look at the led and know as a indicator when he is able to press again. I made several choices about the shape of the final product. instead of working horizontal i want my design more vertical focussed like a gameboy as reference. I tought about the order of the buttons, but i went with the most familiar for me aligned in the middle as in order: LCD, LED, Button and potentiometer. And a simple hole to charge the device which could be expanded to hold a powerbank inside. Digital manufacturing materials and methods \u00b6 I used InkScape and MakersCase to give me a quickstart to making something of my own: I want to use a lasercutter because it easy to quickly iterate on designs and because i am making a simple case which i would maybe want to decorate in the future i would want to use wood. I wanted to use 3D printer but realized it might not be perfect for this situation. I started to lean more towards lasercutting. After reading the HvA makerslab website i realized it might be the one solution for quickly prototyping a case for the device. HvA Makerslab lasercutter page I chose lasercutting because it might be easier while prototyping to finish the wood by hand. This way i can iterate even quicker by cleaning and decorating the final case. I used the small bed lasercutter in HvA makerslab. While searching for woodtypes on the internet and looking at the suppliers that HVA provides on the website i saw a perfect prototyping wood. Gamma The properties of the multiplex wood fit the concept of an electronic dice well because it provides a sturdy base for the electronic components while also being lightweight, easy to transport and really thin. It also has a natural aesthetic that can be enhanced with laser engraving, making it a visually appealing material for the product. And also is pretty cheap which means that for prototyping purposes, it fit the bill perfectly. I also thought about using MDL wood which is like multiplex but lot softer, the choice went out the window because i wanted as thin as possible to conserve space and strong enough to avoid dents. Design \u00b6 MakersCase - base case design to expand on. InkScape - to create the svg files to export and exporting to .dxf file to use in the lasercutter. Paint - for quickly iterating/communicating idea\u2019s and sketches. I drew variations of shapes and sizes to house the components. My first inspiration was to follow the design of a old school gameboy. The thing i mostly was scared of was which order the buttons or sensors needs to be placed and what feels intuitive. I chose the design from the sketches before which what feel to me the most logical. v1 version (.svg) v2 version (.svg) v3 version (.svg) v4 version (.dxf) Prototype \u00b6 Make a simple case from wood, because lasercutting is fast and easy. Thats why i just started and iterate on the design cycle with minimal losses. I wanted to test if this was spacious enough to house all the components. And if it would protect and hold everything together. I used the smart requirements i defined before to test the criteria and this design seems to solve all of them. The height was a bit too high to hold, i probably could adjust it but its more dependant on the components, at which the max height is 40mm. The width and depth could probably use more polishing. The width i kept almost 10mm padding from the LCD width. The depth was okay but i feel it needs more like a gameboy shape. In my failures i used examples to improve my prototyping and the overal design of the product. Create \u00b6 I used InkScape to create a svg file and a base case. I measured everything using the caliper near the HVA makerslab lasercutter. The lasercutter (BRM LASERCUTTER) has a computer, cutter and the air filtration system. Its about the size of a twin size bed. (Werkgebied 1600 x 1000 x 200 mm) The multiplex wood is still a little warped. I had to cut the wood in to pieces at the store because otherwise it would be difficult to transport. And had to use the metal weights near the lasercutter to get an even and consistent cut. Manufacturing settings : Speed 25 Intensity 65 Origin is right bottom Everything on one layer for cutting Everything on one layer for engraving (scanning) Because this is relatively thin wood we could cut really fast without worring about uncut spots. We could play with intensity to get a faster results but may be more volatile/inconsistent. This optimization was not really that game changing. The problem was that lasercutting is already fast. The trick is to measure twice and to cut once. I also added a proper usb-c port while cutting I did this by taking the already existing side plate and measured everything using a caliper and created a few sideplates with a hole, and added a ports on already cut sideplates. Status Image Uploading file to lasercutter using computer and USB stick Before lasercutting In-progress lasercutting After lasercutting Example (final) configuration/vector files: v1 version (.svg) v2 version (.svg) v3 version (.svg) v4 version (.dxf) Conclusion \u00b6 The final product and future improvements: Pictures and or video show the final product in all angles and demonstrate the workings of the product Angle Image TOP LEFT RIGHT BACK CLOSED BACK OPEN INSIDE BACK OPEN OUTISDE FRONT OFF FRONT IDLE FRONT THROW Requirements \u00b6 All requirements have been reached because: Have a opening/Be able to interact with the LCD, Button, LED, Potentiometer and USB-C port. This criteria is reached because all the components have space to be interacted with. Make it transportable in dimension between 20 by 20 centimeters. The criteria is reached because its around the size of one phone tall and around one and half phones wide which makes it super easy and comfortable to transport, carry and use. It should be easy to manifacture by normal hobbyist level means. This criteria was reached because you could probably make it with a woodsaw and have the same results. It was super easy to make and was a fun learning experience. It should protect the components. This criteria was reached because the wood protects the components really wel, the adhesive on the breadbord sticks to the wood making it shakeproof. The inside can be filled in with padding material to make it not rattle and make it feel like it has quality and weight. Useability & improvements \u00b6 The products is perfectly usable. Has a nice shape that conforms to my hand. Makes the device not fragile anymore and makes it fun to use to have people playtest. Probably could change the shape to not be that pointy and also make the insides more secure and holders for the components. Failures \u00b6 Learning is about trying and failing, describe your failures !!! Failure 1 \u00b6 I wanted a easy to set-up creation for the end-user. The problem was after laser cutting i realised the proportions were too perfect/loose. This way they did not lock together so the only way the build could continue is to glue the parts together. I tried glueing all the parts together. This made it hard to rework the internals and also made it look finnicky. Next time i would take more time in thinking or asking for advice trough the future problems that may arrive when designing a device or physical product. !!! Failure 2 \u00b6 I wanted to create a simple case to protect the internals of the device. But i realized my mistake after taking a day of to lasercut. When taking all the components into account i forgot to make a hole for the USB-C port (which is pretty important). So after the manufacturing process i realized i had no way for the power to access the device. I tried solving it by taking a saw and lightly cut it removing as much material as possible without damaging the rest of the device. Then i took a file and started to file it to its final dimensions. Next time i need to take a better look when prototyping so i forgot the user process. Like for example charging or giving power to the device. !!! Failure 3 \u00b6 After creating the case i had problems fitting the components in. LED doenst completely fit. Component spaces did not really fit except the button which was made to click inside the socket. The first case was too big which made holding it uncomfortable, it wasnt really noticable but when held in hands its the corners that pinches you while holding it. Instead i decreased the depth, and height of the case. which gave it a bit of a gameboy form factor. !!! Failure 4 \u00b6 When putting together the \u201cfinal\u201d case for the device it was really hard to push them together without breaking the case. But because i did not know what kerf setting i needed to use i used the default value which was too tight. This caused Bursting seams, kerf wood breaking made it splinter along the edges which made it clear that the setting is too tight for my application. I tried pushing it together sequentially spreading the pressure over as much of a area. Which worked but made me doubt if the next one assembled will have this problem too. I should probably decrease the default kerf size by a tiny amount, because we use thin wood it makes it easy to break when under pressure.","title":"Physical Design"},{"location":"physical_design/#physical-design","text":"","title":"Physical design"},{"location":"physical_design/#concept","text":"The user is a boardgame player, someone in need of a number, gambler or someone who wants to try their luck. Its someone who uses dice regularly in some shape or form. Their needs is to have a random number while being entertained doing so. Their needs might also include keeping track of previous throws to verify cheaters, or even predicting what comes next. That brings us to the main goal of the product which is to tackle those problems by making an electronic dice. Electronic dice can be helpful in this situation because they can keep track of numbers and be used to verify a throw in a specific moment in time. While not being constrained to physical reality, if you need a number from 1-6 and you have a 20 sided die you could not do anything about it. With Electronic Dice\u2122 you can select the number ceiling and not requiring every dice ever. The requirements (SMART) defined for the product: Have a opening/Be able to interact with the LCD, Button, LED, Potentiometer and USB-C port. Make it transportable in dimension between 20 by 20 centimeters. It should be easy to manifacture by normal hobbyist level means. It should protect the components. interaction/design sketch : I made different sketches of what the design and the interaction could be. Because you would look at the LCD while pressing the button, and when a higher number is needed the potentiometer could be turned to higher value. The user can look at the led and know as a indicator when he is able to press again. I made several choices about the shape of the final product. instead of working horizontal i want my design more vertical focussed like a gameboy as reference. I tought about the order of the buttons, but i went with the most familiar for me aligned in the middle as in order: LCD, LED, Button and potentiometer. And a simple hole to charge the device which could be expanded to hold a powerbank inside.","title":"Concept"},{"location":"physical_design/#digital-manufacturing-materials-and-methods","text":"I used InkScape and MakersCase to give me a quickstart to making something of my own: I want to use a lasercutter because it easy to quickly iterate on designs and because i am making a simple case which i would maybe want to decorate in the future i would want to use wood. I wanted to use 3D printer but realized it might not be perfect for this situation. I started to lean more towards lasercutting. After reading the HvA makerslab website i realized it might be the one solution for quickly prototyping a case for the device. HvA Makerslab lasercutter page I chose lasercutting because it might be easier while prototyping to finish the wood by hand. This way i can iterate even quicker by cleaning and decorating the final case. I used the small bed lasercutter in HvA makerslab. While searching for woodtypes on the internet and looking at the suppliers that HVA provides on the website i saw a perfect prototyping wood. Gamma The properties of the multiplex wood fit the concept of an electronic dice well because it provides a sturdy base for the electronic components while also being lightweight, easy to transport and really thin. It also has a natural aesthetic that can be enhanced with laser engraving, making it a visually appealing material for the product. And also is pretty cheap which means that for prototyping purposes, it fit the bill perfectly. I also thought about using MDL wood which is like multiplex but lot softer, the choice went out the window because i wanted as thin as possible to conserve space and strong enough to avoid dents.","title":"Digital manufacturing materials and methods"},{"location":"physical_design/#design","text":"MakersCase - base case design to expand on. InkScape - to create the svg files to export and exporting to .dxf file to use in the lasercutter. Paint - for quickly iterating/communicating idea\u2019s and sketches. I drew variations of shapes and sizes to house the components. My first inspiration was to follow the design of a old school gameboy. The thing i mostly was scared of was which order the buttons or sensors needs to be placed and what feels intuitive. I chose the design from the sketches before which what feel to me the most logical. v1 version (.svg) v2 version (.svg) v3 version (.svg) v4 version (.dxf)","title":"Design"},{"location":"physical_design/#prototype","text":"Make a simple case from wood, because lasercutting is fast and easy. Thats why i just started and iterate on the design cycle with minimal losses. I wanted to test if this was spacious enough to house all the components. And if it would protect and hold everything together. I used the smart requirements i defined before to test the criteria and this design seems to solve all of them. The height was a bit too high to hold, i probably could adjust it but its more dependant on the components, at which the max height is 40mm. The width and depth could probably use more polishing. The width i kept almost 10mm padding from the LCD width. The depth was okay but i feel it needs more like a gameboy shape. In my failures i used examples to improve my prototyping and the overal design of the product.","title":"Prototype"},{"location":"physical_design/#create","text":"I used InkScape to create a svg file and a base case. I measured everything using the caliper near the HVA makerslab lasercutter. The lasercutter (BRM LASERCUTTER) has a computer, cutter and the air filtration system. Its about the size of a twin size bed. (Werkgebied 1600 x 1000 x 200 mm) The multiplex wood is still a little warped. I had to cut the wood in to pieces at the store because otherwise it would be difficult to transport. And had to use the metal weights near the lasercutter to get an even and consistent cut. Manufacturing settings : Speed 25 Intensity 65 Origin is right bottom Everything on one layer for cutting Everything on one layer for engraving (scanning) Because this is relatively thin wood we could cut really fast without worring about uncut spots. We could play with intensity to get a faster results but may be more volatile/inconsistent. This optimization was not really that game changing. The problem was that lasercutting is already fast. The trick is to measure twice and to cut once. I also added a proper usb-c port while cutting I did this by taking the already existing side plate and measured everything using a caliper and created a few sideplates with a hole, and added a ports on already cut sideplates. Status Image Uploading file to lasercutter using computer and USB stick Before lasercutting In-progress lasercutting After lasercutting Example (final) configuration/vector files: v1 version (.svg) v2 version (.svg) v3 version (.svg) v4 version (.dxf)","title":"Create"},{"location":"physical_design/#conclusion","text":"The final product and future improvements: Pictures and or video show the final product in all angles and demonstrate the workings of the product Angle Image TOP LEFT RIGHT BACK CLOSED BACK OPEN INSIDE BACK OPEN OUTISDE FRONT OFF FRONT IDLE FRONT THROW","title":"Conclusion"},{"location":"physical_design/#requirements","text":"All requirements have been reached because: Have a opening/Be able to interact with the LCD, Button, LED, Potentiometer and USB-C port. This criteria is reached because all the components have space to be interacted with. Make it transportable in dimension between 20 by 20 centimeters. The criteria is reached because its around the size of one phone tall and around one and half phones wide which makes it super easy and comfortable to transport, carry and use. It should be easy to manifacture by normal hobbyist level means. This criteria was reached because you could probably make it with a woodsaw and have the same results. It was super easy to make and was a fun learning experience. It should protect the components. This criteria was reached because the wood protects the components really wel, the adhesive on the breadbord sticks to the wood making it shakeproof. The inside can be filled in with padding material to make it not rattle and make it feel like it has quality and weight.","title":"Requirements"},{"location":"physical_design/#useability-improvements","text":"The products is perfectly usable. Has a nice shape that conforms to my hand. Makes the device not fragile anymore and makes it fun to use to have people playtest. Probably could change the shape to not be that pointy and also make the insides more secure and holders for the components.","title":"Useability &amp; improvements"},{"location":"physical_design/#failures","text":"Learning is about trying and failing, describe your failures","title":"Failures"},{"location":"physical_design/#failure-1","text":"I wanted a easy to set-up creation for the end-user. The problem was after laser cutting i realised the proportions were too perfect/loose. This way they did not lock together so the only way the build could continue is to glue the parts together. I tried glueing all the parts together. This made it hard to rework the internals and also made it look finnicky. Next time i would take more time in thinking or asking for advice trough the future problems that may arrive when designing a device or physical product.","title":"!!! Failure 1"},{"location":"physical_design/#failure-2","text":"I wanted to create a simple case to protect the internals of the device. But i realized my mistake after taking a day of to lasercut. When taking all the components into account i forgot to make a hole for the USB-C port (which is pretty important). So after the manufacturing process i realized i had no way for the power to access the device. I tried solving it by taking a saw and lightly cut it removing as much material as possible without damaging the rest of the device. Then i took a file and started to file it to its final dimensions. Next time i need to take a better look when prototyping so i forgot the user process. Like for example charging or giving power to the device.","title":"!!! Failure 2"},{"location":"physical_design/#failure-3","text":"After creating the case i had problems fitting the components in. LED doenst completely fit. Component spaces did not really fit except the button which was made to click inside the socket. The first case was too big which made holding it uncomfortable, it wasnt really noticable but when held in hands its the corners that pinches you while holding it. Instead i decreased the depth, and height of the case. which gave it a bit of a gameboy form factor.","title":"!!! Failure 3"},{"location":"physical_design/#failure-4","text":"When putting together the \u201cfinal\u201d case for the device it was really hard to push them together without breaking the case. But because i did not know what kerf setting i needed to use i used the default value which was too tight. This caused Bursting seams, kerf wood breaking made it splinter along the edges which made it clear that the setting is too tight for my application. I tried pushing it together sequentially spreading the pressure over as much of a area. Which worked but made me doubt if the next one assembled will have this problem too. I should probably decrease the default kerf size by a tiny amount, because we use thin wood it makes it easy to break when under pressure.","title":"!!! Failure 4"},{"location":"product/","text":"Product description \u00b6","title":"Product Description"},{"location":"product/#product-description","text":"","title":"Product description"},{"location":"research/","text":"Profile Fase: Business (Kickstarter) \u00b6 Introduction \u00b6 What if your blueprint becomes a real product? Inventing is just a small step in the overall process of bringing a product to market. Without actually improving the device itself, you can learn a lot by setting up a Kickstarter campaign where you learn about all the choices you have to make to actually make it work. Main question & sub questions \u00b6 The main question of the research is: \u201cHow to do a kickstarter and create a viable business after you have received the funds.\u201d The possible sub-questions are: \u201cWho needs this product?\u201d \u201cWhat is needed, how much does it all cost?\u201d \u201cHow to tie it all together into a executable plan, create a kickstarter and make a selfsustaining business\u201d Research Methods \u00b6 Deskresearch then fieldresearch Scribbr - Veldonderzoek Research results / analysis \u00b6 Who needs this product? (context) \u00b6 Business case There is often a shortage of different types of dice at game nights. Electronic dice can offer a wider range of options, including dice with different numbers of sides or custom designs that may not be available in physical dice. For individuals with physical disabilities or limitations, electronic dice may be a more accessible option than traditional dice. They can be used with one hand or expanded on through voice commands, making them a more inclusive option for all players. Electronic dice can be easily customized to fit the theme or style of a particular game night. This can add an extra level of immersion and engagement for players. Keep track of your throws to remember what the last person threw, do verification and probability analyzing for the geeky fans. Target audience The user is a boardgame player, someone in need of a number, gambler or someone who wants to try their luck. Its someone who uses dice regularly in some shape or form. Their needs is to have a random number while being entertained doing so. Their needs might also include keeping track of previous throws to verify cheaters, or even predicting what comes next. Financial Costs \u00b6 Parts costs \u00b6 We have a list of the costs of the indivividual parts to be used in the end device. Index PartNumber Manufacturer PartName Revision Description Quantity Price Exampleurl 2 hd44780 Hitachi HD44780 20x2 LCD Blue Liquid crystal display 1 \u20ac 14.95 https://www.123-3d.nl/123-3D-LCD-20-x-4-blauw-wit-i226-t15363.html 0 ESP8266-CH340 EspressifSystems WEMOS-D1-MINI v4 controller for device 1 \u20ac 6.35 https://opencircuit.nl/product/wemos-d1-mini-v4.0-wifi-module 1 PCF8574A Hitachi I2C LCD Backpack Analog to I2C bus 1 \u20ac 1.95 https://www.hobbyelectronica.nl/product/i2c-lcd-interface-voor-16x2-en-20x4-displays/ 3 BL-10 RED 30MM Arcade button Red arcade button 1 \u20ac 0.61 https://uge-one.com/arcade-style-big-round-push-button-30mm-blue-color.html 4 Powerbank 5v 2A Any regular powerbank (Optional) \u20ac 9.99 https://www.coolblue.nl/product/899025/bluebuilt-powerbank-20-000-mah-power-delivery-en-quick-charge.html 5 USB to USB-C Cable Any regular (Optional) \u20ac 9.99 https://www.coolblue.nl/product/898237/veripart-usb-c-naar-usb-c-kabel-1m-kunststof-zwart.html 6 5MM LED Any regular (green) 1 \u20ac 0.15 https://www.allekabels.nl/led-diode/7369/1074033/standaard-led-3mm-groen-diffuus.html 7 KW-1520 Potentiometer Linear resistor 10K 1 \u20ac 1.15 https://www.kiwi-electronics.com/nl/panel-mount-10k-potentiometer-breadboard-vriendelijk-1783?search=Panel%20Mount%2010K%20potentiometer Totaal \u20ac 25.16 \u20ac 25.16 for 1 parts kit. Optional items are not counted for, could be expanded in higher tiers. (could be up to \u20ac 45.16) Lasercutting costs \u00b6 There is a company that will cut wood with a lasercutter on request. www.snijlab.nl for over 500 cases its \u20ac 11.97 per individual case, which together add up to \u20ac 5.895.00 (Also includes wood). Packaging costs \u00b6 www.packhelp.com for over 500 packages it cost \u20ac 0.42 per individual packaging, which together costs about \u20ac 210.00 Shipping costs \u00b6 www.postnl.nl/zakelijke-tarieven for over 250 packages it cost over \u20ac ~2.08 per individual package delivery, or 250 at one time for \u20ac ~520.50 (priority and ~2 day delivery). The costs wildly differ from region, and time and circumstances. www.postnl.nl/tarievenboekje This pdfs specifies exactly what price it cost when it goes out the country. it mostly checks out with the calculation above but the cost float around from \u20ac 364.8 - to \u20ac 613.90 depending on priority and size. The device can be cut and placed flat inside the envelope which makes it alot cheaper than conventional packages. This wil need a large margin of error logistics is the most important part of this project and must work preventive. Product Price calculation \u00b6 Wholesale Price = (Cost of Materials + Labor Costs + shipping and packaging) / Units Produced \u20ac 44.19 = (12,730.95 + 8,320.00 + 1,262.50) / 505 Company cost calculation \u00b6 try to determine what you need to keep your company afloat in the long run www.ondernemersplein.kvk.nl/inschrijven-bij-kvk eenmalig \u20ac 75.- employees job functions www.werkzoeken.nl/salaris/inpakker/ Packager : \u20ac 2.170 a month salaries (Me) CEO: \u20ac 5,600.00 a month Packager: \u20ac 2,720.00 a month Marketer: \u20ac 2,880.00 a month office space www.flexas.com/huurprijzen \u20ac 30 a day no extra costs from below or \u20ac 900 a month for a shared office space. phone www.kpn.com/zakelijk/internet-en-bellen \u20ac 31,65 a month water www.waternet.nl/zakelijk/drinkwater \u20ac 1,03 euro per m3 (1.000 liter). \u20ac 109,46 per jaar cleaning www.werkspot.nl/schoonmaak/prijzen \u20ac 18 * 2 hours = \u20ac 36. \u20ac 36 * 4 week = \u20ac 144 a month (if we need it). electrical www.vattenfall.nl/stroom/kwh-kosten \u20ac 0,40 per kWh voor de eerste 2.900 kWh stroom heating www.vattenfall.nl/nieuws/prijsplafond \u20ac 1.45 per m\u00b3 voor de eerste 1.200 m\u00b3 gas \u20ac 47.38 per GJ voor de eerste 37 GJ warmte Implementation \u00b6 The kickstarter shows a movie clip where the product is showcased, all the details are on the page itself. Kickstarter page Electronic Dice The costs we calculated before are put into the spreadsheet of kickstarter to automatically generate a pie chart of the costs on the kickstarter page. Conclusion & recommendations \u00b6 The kickstarter and the plan we created might be able to become self sustainable after intial launch. Try to minimize the cost of the product and the production of it, to have a higher profit margin its easier and more tempting to opt in as a contributer when the product is a lower price and promises more. In the long run it wil be easier to optimize and work on polishing the company workflow. References \u00b6 M. (z.d.). Wat is de gemiddelde huurprijs per m2 voor een bedrijfspand? Flexas.com. https://www.flexas.com/nl/blog/huurprijzen-kantoorruimte-waar-kun-je-op-rekenen Ondernemersplein. (2023b). Inschrijven bij KVK: dit moet u weten. ondernemersplein.kvk.nl. https://ondernemersplein.kvk.nl/inschrijven-bij-kvk/ Snijlab. (z.d.). https://snijlab.nl/ Jensen, L., & \u00d6zkil, A. G. (2018). Identifying challenges in crowdfunded product development: a review of Kickstarter projects. Design science, 4. https://doi.org/10.1017/dsj.2018.14 Benders, L. (2021, 12 november). Veldonderzoek (fieldresearch) doen voor je scriptie. Scribbr. https://www.scribbr.nl/onderzoeksmethoden/fieldresearch-veldonderzoek/ Packhelp. (2023, 30 maart). Corrugated envelope - plain | Packhelp. (https://packhelp.com/p/corrugated-envelope/plain/)","title":"Research"},{"location":"research/#profile-fase-business-kickstarter","text":"","title":"Profile Fase: Business (Kickstarter)"},{"location":"research/#introduction","text":"What if your blueprint becomes a real product? Inventing is just a small step in the overall process of bringing a product to market. Without actually improving the device itself, you can learn a lot by setting up a Kickstarter campaign where you learn about all the choices you have to make to actually make it work.","title":"Introduction"},{"location":"research/#main-question-sub-questions","text":"The main question of the research is: \u201cHow to do a kickstarter and create a viable business after you have received the funds.\u201d The possible sub-questions are: \u201cWho needs this product?\u201d \u201cWhat is needed, how much does it all cost?\u201d \u201cHow to tie it all together into a executable plan, create a kickstarter and make a selfsustaining business\u201d","title":"Main question &amp; sub questions"},{"location":"research/#research-methods","text":"Deskresearch then fieldresearch Scribbr - Veldonderzoek","title":"Research Methods"},{"location":"research/#research-results-analysis","text":"","title":"Research results / analysis"},{"location":"research/#who-needs-this-product-context","text":"Business case There is often a shortage of different types of dice at game nights. Electronic dice can offer a wider range of options, including dice with different numbers of sides or custom designs that may not be available in physical dice. For individuals with physical disabilities or limitations, electronic dice may be a more accessible option than traditional dice. They can be used with one hand or expanded on through voice commands, making them a more inclusive option for all players. Electronic dice can be easily customized to fit the theme or style of a particular game night. This can add an extra level of immersion and engagement for players. Keep track of your throws to remember what the last person threw, do verification and probability analyzing for the geeky fans. Target audience The user is a boardgame player, someone in need of a number, gambler or someone who wants to try their luck. Its someone who uses dice regularly in some shape or form. Their needs is to have a random number while being entertained doing so. Their needs might also include keeping track of previous throws to verify cheaters, or even predicting what comes next.","title":"Who needs this product? (context)"},{"location":"research/#financial-costs","text":"","title":"Financial Costs"},{"location":"research/#parts-costs","text":"We have a list of the costs of the indivividual parts to be used in the end device. Index PartNumber Manufacturer PartName Revision Description Quantity Price Exampleurl 2 hd44780 Hitachi HD44780 20x2 LCD Blue Liquid crystal display 1 \u20ac 14.95 https://www.123-3d.nl/123-3D-LCD-20-x-4-blauw-wit-i226-t15363.html 0 ESP8266-CH340 EspressifSystems WEMOS-D1-MINI v4 controller for device 1 \u20ac 6.35 https://opencircuit.nl/product/wemos-d1-mini-v4.0-wifi-module 1 PCF8574A Hitachi I2C LCD Backpack Analog to I2C bus 1 \u20ac 1.95 https://www.hobbyelectronica.nl/product/i2c-lcd-interface-voor-16x2-en-20x4-displays/ 3 BL-10 RED 30MM Arcade button Red arcade button 1 \u20ac 0.61 https://uge-one.com/arcade-style-big-round-push-button-30mm-blue-color.html 4 Powerbank 5v 2A Any regular powerbank (Optional) \u20ac 9.99 https://www.coolblue.nl/product/899025/bluebuilt-powerbank-20-000-mah-power-delivery-en-quick-charge.html 5 USB to USB-C Cable Any regular (Optional) \u20ac 9.99 https://www.coolblue.nl/product/898237/veripart-usb-c-naar-usb-c-kabel-1m-kunststof-zwart.html 6 5MM LED Any regular (green) 1 \u20ac 0.15 https://www.allekabels.nl/led-diode/7369/1074033/standaard-led-3mm-groen-diffuus.html 7 KW-1520 Potentiometer Linear resistor 10K 1 \u20ac 1.15 https://www.kiwi-electronics.com/nl/panel-mount-10k-potentiometer-breadboard-vriendelijk-1783?search=Panel%20Mount%2010K%20potentiometer Totaal \u20ac 25.16 \u20ac 25.16 for 1 parts kit. Optional items are not counted for, could be expanded in higher tiers. (could be up to \u20ac 45.16)","title":"Parts costs"},{"location":"research/#lasercutting-costs","text":"There is a company that will cut wood with a lasercutter on request. www.snijlab.nl for over 500 cases its \u20ac 11.97 per individual case, which together add up to \u20ac 5.895.00 (Also includes wood).","title":"Lasercutting costs"},{"location":"research/#packaging-costs","text":"www.packhelp.com for over 500 packages it cost \u20ac 0.42 per individual packaging, which together costs about \u20ac 210.00","title":"Packaging costs"},{"location":"research/#shipping-costs","text":"www.postnl.nl/zakelijke-tarieven for over 250 packages it cost over \u20ac ~2.08 per individual package delivery, or 250 at one time for \u20ac ~520.50 (priority and ~2 day delivery). The costs wildly differ from region, and time and circumstances. www.postnl.nl/tarievenboekje This pdfs specifies exactly what price it cost when it goes out the country. it mostly checks out with the calculation above but the cost float around from \u20ac 364.8 - to \u20ac 613.90 depending on priority and size. The device can be cut and placed flat inside the envelope which makes it alot cheaper than conventional packages. This wil need a large margin of error logistics is the most important part of this project and must work preventive.","title":"Shipping costs"},{"location":"research/#product-price-calculation","text":"Wholesale Price = (Cost of Materials + Labor Costs + shipping and packaging) / Units Produced \u20ac 44.19 = (12,730.95 + 8,320.00 + 1,262.50) / 505","title":"Product Price calculation"},{"location":"research/#company-cost-calculation","text":"try to determine what you need to keep your company afloat in the long run www.ondernemersplein.kvk.nl/inschrijven-bij-kvk eenmalig \u20ac 75.- employees job functions www.werkzoeken.nl/salaris/inpakker/ Packager : \u20ac 2.170 a month salaries (Me) CEO: \u20ac 5,600.00 a month Packager: \u20ac 2,720.00 a month Marketer: \u20ac 2,880.00 a month office space www.flexas.com/huurprijzen \u20ac 30 a day no extra costs from below or \u20ac 900 a month for a shared office space. phone www.kpn.com/zakelijk/internet-en-bellen \u20ac 31,65 a month water www.waternet.nl/zakelijk/drinkwater \u20ac 1,03 euro per m3 (1.000 liter). \u20ac 109,46 per jaar cleaning www.werkspot.nl/schoonmaak/prijzen \u20ac 18 * 2 hours = \u20ac 36. \u20ac 36 * 4 week = \u20ac 144 a month (if we need it). electrical www.vattenfall.nl/stroom/kwh-kosten \u20ac 0,40 per kWh voor de eerste 2.900 kWh stroom heating www.vattenfall.nl/nieuws/prijsplafond \u20ac 1.45 per m\u00b3 voor de eerste 1.200 m\u00b3 gas \u20ac 47.38 per GJ voor de eerste 37 GJ warmte","title":"Company cost calculation"},{"location":"research/#implementation","text":"The kickstarter shows a movie clip where the product is showcased, all the details are on the page itself. Kickstarter page Electronic Dice The costs we calculated before are put into the spreadsheet of kickstarter to automatically generate a pie chart of the costs on the kickstarter page.","title":"Implementation"},{"location":"research/#conclusion-recommendations","text":"The kickstarter and the plan we created might be able to become self sustainable after intial launch. Try to minimize the cost of the product and the production of it, to have a higher profit margin its easier and more tempting to opt in as a contributer when the product is a lower price and promises more. In the long run it wil be easier to optimize and work on polishing the company workflow.","title":"Conclusion &amp; recommendations"},{"location":"research/#references","text":"M. (z.d.). Wat is de gemiddelde huurprijs per m2 voor een bedrijfspand? Flexas.com. https://www.flexas.com/nl/blog/huurprijzen-kantoorruimte-waar-kun-je-op-rekenen Ondernemersplein. (2023b). Inschrijven bij KVK: dit moet u weten. ondernemersplein.kvk.nl. https://ondernemersplein.kvk.nl/inschrijven-bij-kvk/ Snijlab. (z.d.). https://snijlab.nl/ Jensen, L., & \u00d6zkil, A. G. (2018). Identifying challenges in crowdfunded product development: a review of Kickstarter projects. Design science, 4. https://doi.org/10.1017/dsj.2018.14 Benders, L. (2021, 12 november). Veldonderzoek (fieldresearch) doen voor je scriptie. Scribbr. https://www.scribbr.nl/onderzoeksmethoden/fieldresearch-veldonderzoek/ Packhelp. (2023, 30 maart). Corrugated envelope - plain | Packhelp. (https://packhelp.com/p/corrugated-envelope/plain/)","title":"References"},{"location":"user_interaction/","text":"","title":"User Interaction"},{"location":"user_manual/","text":"User Manual \u00b6 Product description \u00b6 Step-by-step guide \u00b6 INTRODUCTION An introduction to your product, start by giving context about the problem you are solving for your target audience and include a product description, product images, and product features (a list of things your product can do). You want to have more flair when playing board games with family or friends? Why not use electronic dice? With electronic dice you can keep the statistics or remember what you threw last time. This way you wont forget what the odds are leaning too. You can use it to settle arguments of what happend before with the throw history. The Dice itself will be a microcontroller with a button, LCD screen to display the thrown number and a battery to make it wireless and easy to carry it around. There will be a website where you can throw dice, see history, and or even statistics to keep you up to date on the changes the dice lives through. There will be an admin page to see and manage all the data, and a sweet user friendly front-end where you can see the statics, device data, and the history of throws. To enable the electronic dice to work everywhere, we took the time to create an API where the microcontroller can talk to the website and keep track of your physical gaming statistics. INSTALLATION INSTRUCTIONS ARDUINO IDE AND LIBRARIES Download and install the following libraries: Download the arduino IDE software to install and flashing the microcontroller Installation instructions on how to install the development environment for your product (Arduino IDE, Web development IDE, libraries used, \u2026). BUILD INSTRUCTIONS EMBEDDED DEVICE Elaborate step-by-step build instructions on how to physically build (e.g. connect wires, solder etc.) the prototype embedded device. Solder led with the resistor at the low-end (cathode) and connect it up as in the diagram Solder 3 wires to the potentiometer for easy use INSTALLATION INSTRUCTIONS EMBEDDED CODE Elaborate step-by-step installation instructions on how to get the software of your embedded device from your Gitlab-repository and installing this on your embedded device. NETWORK CONFIGURATION OF EMBEDDED DEVICE Elaborate step-by-step instructions on how to configure the Wifi network of your embedded device. USAGE OF EMBEDDED DEVICE Elaborate step-by-step instructions on how to use the embedded device as an end user. INSTALLATION INSTRUCTIONS DOCKER DESKTOP Elaborate step-by-step installation instructions on how to install Docker Desktop on your laptop/MacBook/host machine. https://www.docker.com/ INSTALLATION INSTRUCTIONS APPLICATION CODE AND LIBRARIES/FRAMEWORKS Elaborate installation instructions on how to download and install code from your GitLab repository and libraries or frameworks used from internet, CONFIGURATION OF THE DATABASE Elaborate instructions on how to configure the database using PhpMyAdmin or other database management tool. USAGE OF APPLICATION FRONT END Elaborate step-by-step instructions on how to use the front-end as an end-user and/or admin. API-REFERENCE API-reference documentation of your self built Web Application back-end API. Link to API documentation Step Image Description 1 2 3 4 5","title":"User Manual"},{"location":"user_manual/#user-manual","text":"","title":"User Manual"},{"location":"user_manual/#product-description","text":"","title":"Product description"},{"location":"user_manual/#step-by-step-guide","text":"INTRODUCTION An introduction to your product, start by giving context about the problem you are solving for your target audience and include a product description, product images, and product features (a list of things your product can do). You want to have more flair when playing board games with family or friends? Why not use electronic dice? With electronic dice you can keep the statistics or remember what you threw last time. This way you wont forget what the odds are leaning too. You can use it to settle arguments of what happend before with the throw history. The Dice itself will be a microcontroller with a button, LCD screen to display the thrown number and a battery to make it wireless and easy to carry it around. There will be a website where you can throw dice, see history, and or even statistics to keep you up to date on the changes the dice lives through. There will be an admin page to see and manage all the data, and a sweet user friendly front-end where you can see the statics, device data, and the history of throws. To enable the electronic dice to work everywhere, we took the time to create an API where the microcontroller can talk to the website and keep track of your physical gaming statistics. INSTALLATION INSTRUCTIONS ARDUINO IDE AND LIBRARIES Download and install the following libraries: Download the arduino IDE software to install and flashing the microcontroller Installation instructions on how to install the development environment for your product (Arduino IDE, Web development IDE, libraries used, \u2026). BUILD INSTRUCTIONS EMBEDDED DEVICE Elaborate step-by-step build instructions on how to physically build (e.g. connect wires, solder etc.) the prototype embedded device. Solder led with the resistor at the low-end (cathode) and connect it up as in the diagram Solder 3 wires to the potentiometer for easy use INSTALLATION INSTRUCTIONS EMBEDDED CODE Elaborate step-by-step installation instructions on how to get the software of your embedded device from your Gitlab-repository and installing this on your embedded device. NETWORK CONFIGURATION OF EMBEDDED DEVICE Elaborate step-by-step instructions on how to configure the Wifi network of your embedded device. USAGE OF EMBEDDED DEVICE Elaborate step-by-step instructions on how to use the embedded device as an end user. INSTALLATION INSTRUCTIONS DOCKER DESKTOP Elaborate step-by-step installation instructions on how to install Docker Desktop on your laptop/MacBook/host machine. https://www.docker.com/ INSTALLATION INSTRUCTIONS APPLICATION CODE AND LIBRARIES/FRAMEWORKS Elaborate installation instructions on how to download and install code from your GitLab repository and libraries or frameworks used from internet, CONFIGURATION OF THE DATABASE Elaborate instructions on how to configure the database using PhpMyAdmin or other database management tool. USAGE OF APPLICATION FRONT END Elaborate step-by-step instructions on how to use the front-end as an end-user and/or admin. API-REFERENCE API-reference documentation of your self built Web Application back-end API. Link to API documentation Step Image Description 1 2 3 4 5","title":"Step-by-step guide"},{"location":"web_application/","text":"Creating Database & Entity Relationship Diagram \u00b6 Creating a database is an important step in organizing and managing data for any organization or project. A database is a collection of data that is organized and stored in a way that allows for efficient retrieval and manipulation of the information. The database schema includes the structure of the database, including the tables, columns, and relationships between tables. The entity-relationship diagram (ERD) is a tool used to visualize the schema and the relationships between entities. Here is my Entity Relationship Diagram I designed in the beginning which was a tought process over what data should i save and need later? Once the design was close enough, the database can be implemented using a database management system (DBMS). The DBMS provides a way to create, modify, and query the database. Which was in this case MySQL Workbench. I recreated the ERD I have created and during the development and designing of the database i added corrections: Here we create the schema which is the database, and holds all tables and values. CREATE SCHEMA IF NOT EXISTS ` IOT ` DEFAULT CHARACTER SET utf8mb4 ; USE ` IOT ` ; Then we create the Dice table which has auto incrementing ID and automatically added timeStamp() function, and the number we are saving and the chipid from the device. We can use the chipid later to filter, it will be the same for the timestamp. CREATE TABLE IF NOT EXISTS ` IOT ` . ` Dice ` ( ` ID ` INT ( 11 ) NOT NULL AUTO_INCREMENT , ` TimeStamp ` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP (), ` RolledNumber ` INT ( 11 ) NULL DEFAULT NULL , ` ChipID ` VARCHAR ( 45 ) NULL DEFAULT NULL , PRIMARY KEY ( ` ID ` )) ENGINE = InnoDB AUTO_INCREMENT = 10 DEFAULT CHARACTER SET = utf8mb4 ; I added a Measurement table with values id, timestamp, and measurement. This was to save any sensor value which might come up later in development, The table is used to save potentiometer data so we can filter with max throws so we always get dice throws that are below 6. CREATE TABLE IF NOT EXISTS ` IOT ` . ` Measurement ` ( ` ID ` INT ( 11 ) NOT NULL AUTO_INCREMENT , ` TimeStamp ` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP (), ` Measurement ` VARCHAR ( 45 ) NULL DEFAULT NULL , PRIMARY KEY ( ` ID ` )) ENGINE = InnoDB DEFAULT CHARACTER SET = utf8mb4 ; I added Dice has Measurement as last because its a many:many table relationship but it might not be the case. so multiple dice can have multiple values. (which might be incorrect). But its mostly used to indicate what sensor the dice throw is based off. CREATE TABLE IF NOT EXISTS ` IOT ` . ` Dice_has_Measurement ` ( ` Dice_ID ` INT ( 11 ) NOT NULL , ` Measurement_ID ` INT ( 11 ) NOT NULL , PRIMARY KEY ( ` Dice_ID ` , ` Measurement_ID ` ), INDEX ` fk_Dice_has_Measurement_Measurement1_idx ` ( ` Measurement_ID ` ASC ) VISIBLE , INDEX ` fk_Dice_has_Measurement_Dice_idx ` ( ` Dice_ID ` ASC ) VISIBLE , CONSTRAINT ` fk_Dice_has_Measurement_Dice ` FOREIGN KEY ( ` Dice_ID ` ) REFERENCES ` IOT ` . ` Dice ` ( ` ID ` ) ON DELETE NO ACTION ON UPDATE NO ACTION , CONSTRAINT ` fk_Dice_has_Measurement_Measurement1 ` FOREIGN KEY ( ` Measurement_ID ` ) REFERENCES ` IOT ` . ` Measurement ` ( ` ID ` ) ON DELETE NO ACTION ON UPDATE NO ACTION ) ENGINE = InnoDB DEFAULT CHARACTER SET = utf8mb4 ; After tweaking and realising the system and testing i ended with the following ERD diagram made in workbench. ChipID and a many to many relationship was added to the ERD as corrections. Download link for the Database: \u00b6 Database file (.sql) To install the .sql file onto the database: phpmyadmin \u00b6 type in the web-browser address bar \u201clocalhost/phpmyadmin/\u201d. Login with given credentials When logged in, click on \u201cimporting\u201d at the top bar. Upload the .sql file, change settings to your liking (doesnt need any change). Press import! You see a screen filled with successfull commands, go to the database and always double check if everything is properly imported. Done! mysql workbench \u00b6 Start up mysql workbench and connect to the database. In the upperleft corner there is a \u201csql file with a folder\u201d icon, click on it. Select and import the downloaded .sql file. You should see a screen with the imported sql commands. In the left upper second bar, you should see a lighting icon, click on it. The sql commands are being executed at the bottom, with no errors. Done! Making the link between back-end and database \u00b6 The back-end of my website is the middleman between the user and the data that is stored on the server we can call it a facade. It usually handles the data handling, sanitization and logic. Database connection \u00b6 First a connection to the database is set-up, which could be expanded to have more error handling. Then it set-ups the different facades using the connection from the set-up before. We can later use the initialized facade in different data function that will handle requests. Because im used to having a Model View Controller system, the connection part would normally be the Model in MVC system. Github Database Connection File // Database connection details $servername = 'mariadb'; $user = 'root'; $password = '7YKyE8R2AhKzswfN'; $dbname = 'IOT'; // Connect to the database $conn = mysqli_connect($servername, $user, $password, $dbname); // Check for connection errors if (!$conn) { die('Connection failed: ' . mysqli_connect_error()); } // Create an instance of the DiceFacade class/model/database require \"diceFacade.php\"; $dice_facade = new DiceFacade($conn); Facade \u00b6 The DiceFacade is the middle man between the database and the front-end (Facade). The DiceFacade handles all data using the Create Read Update Delete (CRUD) pattern. It only has functions for now that are crucial for the working of the general whole system. When the facade is initialized the constructor takes the connection and saves it for local use. The create function takes 2 variables, chipid and rollednumber. Which is neccesary to save device data. Next is the read function with this function all data can be read, and i added a minified version (API) for the device to not crash the microcontroller. The sanitization of data here could be very much improved upon. Github DiceFacade Backend File /* * Programmed by: Rico Coelen * * This script provides a simplified way to store and retrieve using the CRUD design system * to retrieve/save dice roll information in a database table called \"dice\". * This script acts as a layer, a facade. to seperate the functions and increase the reusability for the developer. * * MIT License * Copyright (c) 2023 Rico Coelen */ class DiceFacade { private $conn; function __construct($conn) { $this->conn = $conn; } function create($rollednumber, $chipid) { $timestamp = date('Y-m-d H:i:s'); $sql = \"INSERT INTO dice (ID, TimeStamp, RolledNumber, ChipID) VALUES (NULL, NULLIF('$timestamp', ''), '$rollednumber', '$chipid')\"; if ($this->conn->query($sql) === TRUE) { return true; } else { return false; } } function read($chipID = null, $limit = 5) { $sql = \"SELECT * FROM dice\"; if ($chipID !== null) { $sql .= \" WHERE chipid = '\" . $chipID . \"'\"; } $sql .= \" ORDER BY TimeStamp DESC\"; if ($limit !== null) { $sql .= \" LIMIT \" . $limit; } $result = $this->conn->query($sql); if ($result->num_rows > 0) { $rows = array(); while ($row = $result->fetch_assoc()) { $rows[] = $row; } return $rows; } else { return false; } } } Making the Application Programming Interface \u00b6 The API should be a seperate module from the front-end and back-end. The API module handles the request from the website and or the microncontroller using a switch state to determine what action to follow up on (which could be improved). The request includes create function which just sanitizes/validate and saves the record/data to database. Github API file /* * Programmed by: Rico Coelen * * This script provides a simplified way to store and retrieve using the CRUD design system * to retrieve/save dice roll information in a database table called \"dice\". * This script catches API request and fetches the request using the facades. * * MIT License * Copyright (c) 2023 Rico Coelen */ // Set the response headers header('Content-Type: application/json'); // get $conn require \"database.php\"; switch($_GET[\"action\"]) { case \"create\": // Create a new record in the dice table $dice_facade->create($_GET[\"number\"], $_GET[\"chipid\"]); echo json_encode(array('success' => true)); // relay success variable to device break; case \"read\": // check optional variables here $limit = isset($_GET[\"limit\"]) ? $_GET[\"limit\"] : null; $chipid = isset($_GET[\"chipid\"]) ? strtoupper($_GET[\"chipid\"]) : null; // handle extra parameters if (isset($_GET[\"textready\"])) { // check if arduino is requesting data to show (minified version for arduino ram) $temp = ($dice_facade->read($chipid, $limit)); $numbers = array(); if($temp) { foreach ($temp as $arr) { array_push($numbers, $arr[\"RolledNumber\"]); } } array_push($numbers, array('success' => true)); // add success message echo json_encode($numbers); // relay information to device } else { $data = ($dice_facade->read($chipid, $limit)); // read data using facade array_push($data, array('success' => true)); // add success message echo json_encode($data); // relay information to device } break; default: echo json_encode(array('success' => true)); // even when nothing returns show connection established echo \"No Action!\"; break; } Making the Frontend \u00b6 The front-end is a really simplistic view of the data, now there are no function to filter or manipulate data for now but that could be subject to change. The index page has a simple table that updates every N seconds. When it has new data it will flash the new data at the top. Github HTML FILE LINK Github JS FILE LINK Github CSS FILE LINK Jquery Screenshot \u00b6 Screenshot of the index.php page where you can see live data. Screenshot of the flashing data using CSS. Code/Ajax Calls \u00b6 To not get weird logic we want to save previous data to later compare against new data. var existingData ; The get data function is the function that get runned in the first frame which does the initial creation of the table and does a AJAX call towards the backend of the website and uses the read function to get all data from the Dice table. And does not care if the data already existed or not. function getData () { $ . ajax ({ url : \"api.php?action=read\" , // URL of backend API dataType : \"json\" , success : function ( data ) { console . log ( \"Started Data!\" ); // Call the `updateData` function to start fetching data from the server existingData = data ; UpdateDiceTable ( data ); setTimeout ( updateData , 2000 ); }, error : function ( xhr , status , error ) { console . log ( error ); // handle the error here }, }); } The UpdateFunction get run every N seconds and compares new data with old and update and animate the table with new data. function updateData () { $ . ajax ({ url : \"api.php?action=read\" , // URL of backend API dataType : \"json\" , success : function ( data ) { // Check if the new data is different from the existing data if ( JSON . stringify ( existingData ) !== JSON . stringify ( data )) { UpdateDiceTable ( data ); existingData = data ; } }, error : function ( xhr , status , error ) { console . log ( error ); // handle the error here }, complete : function () { // repeat function every 2 seconds setTimeout ( updateData , 2000 ); console . log ( \"Updated Data!\" ); } }); } This function does the actuall appending of the data towards the html table, it also sorts it by ID so we can see the newest rolled number at the top. function UpdateDiceTable ( data ) { // Sort data by ID in descending order data . sort ( function ( a , b ) { return b . ID - a . ID ; }); // Clear the table body $ ( \"#data-container\" ). empty (); // Add the new data to the table $ . each ( data , function ( i , item ) { var row = $ ( \"<tr>\" ); $ ( \"<td>\" ). html ( item . ID ). appendTo ( row ); $ ( \"<td>\" ). html ( item . TimeStamp ). appendTo ( row ); $ ( \"<td>\" ). html ( item . RolledNumber ). appendTo ( row ); $ ( \"<td>\" ). html ( item . ChipID ). appendTo ( row ); if ( i == 0 ) { row . addClass ( \"flash\" ); } row . appendTo ( \"#data-container\" ); }); } When the javascript code is fully loaded in we can run getData() to start the updating process which will repeat indefinitely. getData ();","title":"Documentation"},{"location":"web_application/#creating-database-entity-relationship-diagram","text":"Creating a database is an important step in organizing and managing data for any organization or project. A database is a collection of data that is organized and stored in a way that allows for efficient retrieval and manipulation of the information. The database schema includes the structure of the database, including the tables, columns, and relationships between tables. The entity-relationship diagram (ERD) is a tool used to visualize the schema and the relationships between entities. Here is my Entity Relationship Diagram I designed in the beginning which was a tought process over what data should i save and need later? Once the design was close enough, the database can be implemented using a database management system (DBMS). The DBMS provides a way to create, modify, and query the database. Which was in this case MySQL Workbench. I recreated the ERD I have created and during the development and designing of the database i added corrections: Here we create the schema which is the database, and holds all tables and values. CREATE SCHEMA IF NOT EXISTS ` IOT ` DEFAULT CHARACTER SET utf8mb4 ; USE ` IOT ` ; Then we create the Dice table which has auto incrementing ID and automatically added timeStamp() function, and the number we are saving and the chipid from the device. We can use the chipid later to filter, it will be the same for the timestamp. CREATE TABLE IF NOT EXISTS ` IOT ` . ` Dice ` ( ` ID ` INT ( 11 ) NOT NULL AUTO_INCREMENT , ` TimeStamp ` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP (), ` RolledNumber ` INT ( 11 ) NULL DEFAULT NULL , ` ChipID ` VARCHAR ( 45 ) NULL DEFAULT NULL , PRIMARY KEY ( ` ID ` )) ENGINE = InnoDB AUTO_INCREMENT = 10 DEFAULT CHARACTER SET = utf8mb4 ; I added a Measurement table with values id, timestamp, and measurement. This was to save any sensor value which might come up later in development, The table is used to save potentiometer data so we can filter with max throws so we always get dice throws that are below 6. CREATE TABLE IF NOT EXISTS ` IOT ` . ` Measurement ` ( ` ID ` INT ( 11 ) NOT NULL AUTO_INCREMENT , ` TimeStamp ` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP (), ` Measurement ` VARCHAR ( 45 ) NULL DEFAULT NULL , PRIMARY KEY ( ` ID ` )) ENGINE = InnoDB DEFAULT CHARACTER SET = utf8mb4 ; I added Dice has Measurement as last because its a many:many table relationship but it might not be the case. so multiple dice can have multiple values. (which might be incorrect). But its mostly used to indicate what sensor the dice throw is based off. CREATE TABLE IF NOT EXISTS ` IOT ` . ` Dice_has_Measurement ` ( ` Dice_ID ` INT ( 11 ) NOT NULL , ` Measurement_ID ` INT ( 11 ) NOT NULL , PRIMARY KEY ( ` Dice_ID ` , ` Measurement_ID ` ), INDEX ` fk_Dice_has_Measurement_Measurement1_idx ` ( ` Measurement_ID ` ASC ) VISIBLE , INDEX ` fk_Dice_has_Measurement_Dice_idx ` ( ` Dice_ID ` ASC ) VISIBLE , CONSTRAINT ` fk_Dice_has_Measurement_Dice ` FOREIGN KEY ( ` Dice_ID ` ) REFERENCES ` IOT ` . ` Dice ` ( ` ID ` ) ON DELETE NO ACTION ON UPDATE NO ACTION , CONSTRAINT ` fk_Dice_has_Measurement_Measurement1 ` FOREIGN KEY ( ` Measurement_ID ` ) REFERENCES ` IOT ` . ` Measurement ` ( ` ID ` ) ON DELETE NO ACTION ON UPDATE NO ACTION ) ENGINE = InnoDB DEFAULT CHARACTER SET = utf8mb4 ; After tweaking and realising the system and testing i ended with the following ERD diagram made in workbench. ChipID and a many to many relationship was added to the ERD as corrections.","title":"Creating Database &amp; Entity Relationship Diagram"},{"location":"web_application/#download-link-for-the-database","text":"Database file (.sql) To install the .sql file onto the database:","title":"Download link for the Database:"},{"location":"web_application/#phpmyadmin","text":"type in the web-browser address bar \u201clocalhost/phpmyadmin/\u201d. Login with given credentials When logged in, click on \u201cimporting\u201d at the top bar. Upload the .sql file, change settings to your liking (doesnt need any change). Press import! You see a screen filled with successfull commands, go to the database and always double check if everything is properly imported. Done!","title":"phpmyadmin"},{"location":"web_application/#mysql-workbench","text":"Start up mysql workbench and connect to the database. In the upperleft corner there is a \u201csql file with a folder\u201d icon, click on it. Select and import the downloaded .sql file. You should see a screen with the imported sql commands. In the left upper second bar, you should see a lighting icon, click on it. The sql commands are being executed at the bottom, with no errors. Done!","title":"mysql workbench"},{"location":"web_application/#making-the-link-between-back-end-and-database","text":"The back-end of my website is the middleman between the user and the data that is stored on the server we can call it a facade. It usually handles the data handling, sanitization and logic.","title":"Making the link between back-end and database"},{"location":"web_application/#database-connection","text":"First a connection to the database is set-up, which could be expanded to have more error handling. Then it set-ups the different facades using the connection from the set-up before. We can later use the initialized facade in different data function that will handle requests. Because im used to having a Model View Controller system, the connection part would normally be the Model in MVC system. Github Database Connection File // Database connection details $servername = 'mariadb'; $user = 'root'; $password = '7YKyE8R2AhKzswfN'; $dbname = 'IOT'; // Connect to the database $conn = mysqli_connect($servername, $user, $password, $dbname); // Check for connection errors if (!$conn) { die('Connection failed: ' . mysqli_connect_error()); } // Create an instance of the DiceFacade class/model/database require \"diceFacade.php\"; $dice_facade = new DiceFacade($conn);","title":"Database connection"},{"location":"web_application/#facade","text":"The DiceFacade is the middle man between the database and the front-end (Facade). The DiceFacade handles all data using the Create Read Update Delete (CRUD) pattern. It only has functions for now that are crucial for the working of the general whole system. When the facade is initialized the constructor takes the connection and saves it for local use. The create function takes 2 variables, chipid and rollednumber. Which is neccesary to save device data. Next is the read function with this function all data can be read, and i added a minified version (API) for the device to not crash the microcontroller. The sanitization of data here could be very much improved upon. Github DiceFacade Backend File /* * Programmed by: Rico Coelen * * This script provides a simplified way to store and retrieve using the CRUD design system * to retrieve/save dice roll information in a database table called \"dice\". * This script acts as a layer, a facade. to seperate the functions and increase the reusability for the developer. * * MIT License * Copyright (c) 2023 Rico Coelen */ class DiceFacade { private $conn; function __construct($conn) { $this->conn = $conn; } function create($rollednumber, $chipid) { $timestamp = date('Y-m-d H:i:s'); $sql = \"INSERT INTO dice (ID, TimeStamp, RolledNumber, ChipID) VALUES (NULL, NULLIF('$timestamp', ''), '$rollednumber', '$chipid')\"; if ($this->conn->query($sql) === TRUE) { return true; } else { return false; } } function read($chipID = null, $limit = 5) { $sql = \"SELECT * FROM dice\"; if ($chipID !== null) { $sql .= \" WHERE chipid = '\" . $chipID . \"'\"; } $sql .= \" ORDER BY TimeStamp DESC\"; if ($limit !== null) { $sql .= \" LIMIT \" . $limit; } $result = $this->conn->query($sql); if ($result->num_rows > 0) { $rows = array(); while ($row = $result->fetch_assoc()) { $rows[] = $row; } return $rows; } else { return false; } } }","title":"Facade"},{"location":"web_application/#making-the-application-programming-interface","text":"The API should be a seperate module from the front-end and back-end. The API module handles the request from the website and or the microncontroller using a switch state to determine what action to follow up on (which could be improved). The request includes create function which just sanitizes/validate and saves the record/data to database. Github API file /* * Programmed by: Rico Coelen * * This script provides a simplified way to store and retrieve using the CRUD design system * to retrieve/save dice roll information in a database table called \"dice\". * This script catches API request and fetches the request using the facades. * * MIT License * Copyright (c) 2023 Rico Coelen */ // Set the response headers header('Content-Type: application/json'); // get $conn require \"database.php\"; switch($_GET[\"action\"]) { case \"create\": // Create a new record in the dice table $dice_facade->create($_GET[\"number\"], $_GET[\"chipid\"]); echo json_encode(array('success' => true)); // relay success variable to device break; case \"read\": // check optional variables here $limit = isset($_GET[\"limit\"]) ? $_GET[\"limit\"] : null; $chipid = isset($_GET[\"chipid\"]) ? strtoupper($_GET[\"chipid\"]) : null; // handle extra parameters if (isset($_GET[\"textready\"])) { // check if arduino is requesting data to show (minified version for arduino ram) $temp = ($dice_facade->read($chipid, $limit)); $numbers = array(); if($temp) { foreach ($temp as $arr) { array_push($numbers, $arr[\"RolledNumber\"]); } } array_push($numbers, array('success' => true)); // add success message echo json_encode($numbers); // relay information to device } else { $data = ($dice_facade->read($chipid, $limit)); // read data using facade array_push($data, array('success' => true)); // add success message echo json_encode($data); // relay information to device } break; default: echo json_encode(array('success' => true)); // even when nothing returns show connection established echo \"No Action!\"; break; }","title":"Making the Application Programming Interface"},{"location":"web_application/#making-the-frontend","text":"The front-end is a really simplistic view of the data, now there are no function to filter or manipulate data for now but that could be subject to change. The index page has a simple table that updates every N seconds. When it has new data it will flash the new data at the top. Github HTML FILE LINK Github JS FILE LINK Github CSS FILE LINK Jquery","title":"Making the Frontend"},{"location":"web_application/#screenshot","text":"Screenshot of the index.php page where you can see live data. Screenshot of the flashing data using CSS.","title":"Screenshot"},{"location":"web_application/#codeajax-calls","text":"To not get weird logic we want to save previous data to later compare against new data. var existingData ; The get data function is the function that get runned in the first frame which does the initial creation of the table and does a AJAX call towards the backend of the website and uses the read function to get all data from the Dice table. And does not care if the data already existed or not. function getData () { $ . ajax ({ url : \"api.php?action=read\" , // URL of backend API dataType : \"json\" , success : function ( data ) { console . log ( \"Started Data!\" ); // Call the `updateData` function to start fetching data from the server existingData = data ; UpdateDiceTable ( data ); setTimeout ( updateData , 2000 ); }, error : function ( xhr , status , error ) { console . log ( error ); // handle the error here }, }); } The UpdateFunction get run every N seconds and compares new data with old and update and animate the table with new data. function updateData () { $ . ajax ({ url : \"api.php?action=read\" , // URL of backend API dataType : \"json\" , success : function ( data ) { // Check if the new data is different from the existing data if ( JSON . stringify ( existingData ) !== JSON . stringify ( data )) { UpdateDiceTable ( data ); existingData = data ; } }, error : function ( xhr , status , error ) { console . log ( error ); // handle the error here }, complete : function () { // repeat function every 2 seconds setTimeout ( updateData , 2000 ); console . log ( \"Updated Data!\" ); } }); } This function does the actuall appending of the data towards the html table, it also sorts it by ID so we can see the newest rolled number at the top. function UpdateDiceTable ( data ) { // Sort data by ID in descending order data . sort ( function ( a , b ) { return b . ID - a . ID ; }); // Clear the table body $ ( \"#data-container\" ). empty (); // Add the new data to the table $ . each ( data , function ( i , item ) { var row = $ ( \"<tr>\" ); $ ( \"<td>\" ). html ( item . ID ). appendTo ( row ); $ ( \"<td>\" ). html ( item . TimeStamp ). appendTo ( row ); $ ( \"<td>\" ). html ( item . RolledNumber ). appendTo ( row ); $ ( \"<td>\" ). html ( item . ChipID ). appendTo ( row ); if ( i == 0 ) { row . addClass ( \"flash\" ); } row . appendTo ( \"#data-container\" ); }); } When the javascript code is fully loaded in we can run getData() to start the updating process which will repeat indefinitely. getData ();","title":"Code/Ajax Calls"}]}